grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"


compilationUnit
   : programUnit+
   ;

programUnit
   : programUnit* endProgramStatement?
   ;

endProgramStatement
   : END PROGRAM programName DOT_FS
   ;
   
programName
   : NONNUMERICLITERAL | cobolWord
   ;
   
   // literals
NONNUMERICLITERAL : MPL_ID  | HEX;



terminal  DIGIT: '0'..'9';
terminal  LETTER: ('a'..'z'|'A'..'Z');
terminal  HEX: ('a'..'f'|'A'..'F'|'0'..'9');
terminal TK_FLOAT  :
    (('0'..'9')+ '.' ('0'..'9')+)
    (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;



 BOOLEAN: T R U E | F A L S E;

@Override 
terminal STRING:
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'" |
    "`"+ ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"+;
 
terminal BRACKET_COMMENT: 
    '{*' !('\n'|'\r')* ('\r'? '\n')?;
    
terminal BAR_COMMENT: 
    '|*' !('\n'|'\r')* ('\r'? '\n')?;  


terminal MPL_ID: 
    ('a'..'z'|'A'..'Z'|'0'..'9')(('_'|'-')*('a'..'z'|'A'..'Z'|'0'..'9')+)*; 
    
    
terminal fragment HEXNUMBER :
	('a'..'f'|'A'..'F'|'0'..'9');

fragment STRINGLITERAL :
	'"' (~["\n\r] | '""' | '\'')* '"'
	| '\'' (~['\n\r] | '\'\'' | '"')* '\''
;

fragment DBCSLITERAL :
	[GN] '"' (~["\n\r] | '""' | '\'')* '"'
	| [GN] '\'' (~['\n\r] | '\'\'' | '"')* '\''
;

LEVEL_NUMBER_66 : '66';
LEVEL_NUMBER_77 : '77';
LEVEL_NUMBER_88 : '88';

INTEGERLITERAL : (PLUSCHAR | MINUSCHAR)? ('0'->'9')+;

NUMERICLITERAL : (PLUSCHAR | MINUSCHAR)? ('0'->'9')* (DOT | COMMACHAR) '0'->'9'+ (('e' | 'E') (PLUSCHAR | MINUSCHAR)? ('0'->'9')+)?;

IDENTIFIER :('a'->'z'|'A'->'Z'|'0'->'9')(('_'|'-')*('a'->'z'|'A'->'Z'|'0'->'9')+)*; 

// whitespace, line breaks, comments, ...
NEWLINE : '\r'? '\n' ;
EXECCICSLINE : EXECCICSTAG WS ('\n' | '\r' | '.')+;
EXECSQLIMSLINE : EXECSQLIMSTAG WS ('\n' | '\r' | '.')+;
EXECSQLLINE : EXECSQLTAG WS ('\n' | '\r' | '.')+;
COMMENTENTRYLINE : COMMENTENTRYTAG WS ('\n' | '\r')*;
COMMENTLINE : COMMENTTAG WS ('\n' | '\r')* ;
//WS : [ \t\f;]+  skip;
 @Override 
terminal WS	: (' '|'\t'|'\r'|'\n')+;
    
    
    
    
    
// symbols
AMPCHAR : '&';
ASTERISKCHAR : '*';
DOUBLEASTERISKCHAR : '**';
COLONCHAR : ':';
COMMACHAR : ',';
COMMENTENTRYTAG : '>*CE';
COMMENTTAG : '>*';
DOLLARCHAR : '$';
DOUBLEQUOTE : '"';
// period full stop
DOT_FS : '.' ('\r' | '\n' | '\f' | '\t' | ' ')+ | '.' EOF;
DOT : '.';
EQUALCHAR : '=';
EXECCICSTAG : '>*EXECCICS';
EXECSQLTAG : '>*EXECSQL';
EXECSQLIMSTAG : '>*EXECSQLIMS';
LESSTHANCHAR : '<';
LESSTHANOREQUAL : '<=';
LPARENCHAR : '(';
MINUSCHAR : '-';
MORETHANCHAR : '>';
MORETHANOREQUAL : '>=';
PLUSCHAR : '+';
SINGLEQUOTE : '\'';
RPARENCHAR : ')';
SLASHCHAR : '/';
 //Key words
 END : E N D;
 PROGRAM : P R O G R A M;

// case insensitive chars
fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');